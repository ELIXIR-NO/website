---
import ProjectCard from "../../components/project-card";
import {getCollection} from 'astro:content';
import {slugToTitleCase, sortStringsByLength} from "../../lib/utils";
import ComplexLayout from "../../layouts/complex.astro";
import MetadataFilter from "../../components/metadata-filter";

const extractKeywords = (items: any) => {
    return sortStringsByLength([
        ...new Set<string>(
            items
                .map((item: any) => (item.data?.keywords ?? []))
                .reduce((pv: any, cv: any) => pv.concat(cv), []) as string[]
        )
    ]).map((keyword) => ({
        id: keyword,
        value: keyword,
        label: slugToTitleCase(keyword),
    }));
};

const extractCategories = (items) => {
    return sortStringsByLength([
        ...new Set<string>(
            items
                .map((item: any) => item.data?.category)
                .filter(Boolean) as string[]
        )
    ]).map((category) => ({
        id: category,
        value: category,
        label: slugToTitleCase(category),
    }));
};

const extractStatuses = (items: any) => {
    return sortStringsByLength([
        ...new Set<string>(
            items
                .map((item: any) => item.data?.status)
                .filter(Boolean) as string[]
        )
    ]).map((status) => ({
        id: status,
        value: status,
        label: slugToTitleCase(status),
    }));
};

const extractAllMetadata = (items) => {
    return {
        keywords: extractKeywords(items),
        categories: extractCategories(items),
        statuses: extractStatuses(items),
    };
};

const projects = await getCollection('projects');

const _projects = projects.map(
    ({slug, id, data}) => ({slug, id, ...data})
);

const _filters = [

    {
        name: "category",
        values: extractCategories(projects)
    },
    {
        name: "status",
        values: extractStatuses(projects)
    },
    {
        name: "keywords",
        values: extractKeywords(projects)
    },
];
---
<ComplexLayout title="Funding & Projects" sidebar="equal">

    <div slot="left">
        <div>
            <h2 class="text-xl font-bold">Refine your search</h2>
        </div>
        <script is:inline>
            document.addEventListener("DOMContentLoaded", () => {
                function getKeywordsFromUrl() {
                    const params = new URLSearchParams(window.location.search);
                    return new Set(params.getAll('keywords'));
                }

                function getCategoryFromUrl() {
                    const params = new URLSearchParams(window.location.search);
                    return new Set(params.getAll('category'));
                }

                function getStatusFromUrl() {
                    const params = new URLSearchParams(window.location.search);
                    return new Set(params.getAll('status'));
                }

                function hasIntersection(a, b) {
                    for (let elem of a) {
                        if (b.has(elem)) {
                            return true;
                        }
                    }
                    return false;
                }

                // Function to hide/show elements based on tags
                function updateVisibility() {
                    const [keywords, status, category] = [
                        getKeywordsFromUrl(),
                        getStatusFromUrl(),
                        getCategoryFromUrl()
                    ];
                    console.log({keywords, status, category})
                    const container = document.querySelector('[data-projects-container]');
                    const allProjectElements = container.querySelectorAll(`[data-project]`);
                    console.log({allProjectElements})
                    if (!container)
                        // if no containing parent, we ignore the toggles
                        return;
                    allProjectElements.forEach(element => {
                        const pk = new Set(element.getAttribute(`data-keywords`).split(','));
                        const ps = new Set([element.getAttribute(`data-status`)]);
                        const pc = new Set([element.getAttribute(`data-category`)]);
                        console.log({
                            pk, ps, pc, el: element.getAttribute('data-project'), showIf: {
                                "keywords-size0": keywords.size === 0,
                                "status.size0": status.size === 0,
                                "category.size0": category.size === 0,
                                "keywords.intersection": keywords.intersection(pk).size,
                                "status.intersection": status.intersection(ps).size,
                                "category.intersection": category.intersection(pc).size,
                            }
                        })
                        if (
                            (keywords.size === 0 || keywords.intersection(pk).size) ||
                            (status.size === 0 || status.intersection(ps).size) ||
                            (category.size === 0 && category.intersection(pc).size)
                        ) {
                            element.classList.remove('hidden');
                            element.classList.add('block');
                        } else {
                            element.classList.remove('block');
                            element.classList.add('hidden');
                        }
                    });
                }

                // Initial visibility update
                updateVisibility();
                // Watch for URL changes and update visibility
                window.addEventListener('url-change', updateVisibility);
                // Handle initial load with URL parameters
                window.addEventListener('load', updateVisibility);
            });
        </script>
        <MetadataFilter client:load filters={_filters}/>
    </div>

    <section class="flex flex-col gap-y-8 mt-12">
        <ol class="columns-1 lg:columns-2 gap-x-4" data-projects-container="1">
            {_projects.filter(({draft}) => !draft).map((project) => {
                return (
                        <ProjectCard project={project} title={project.title}
                                     href={`/funding-and-projects/${project.slug}`}>
                            {project.summary}
                        </ProjectCard>
                );
            })}
        </ol>
    </section>

</ComplexLayout>

